# -*- coding: utf-8 -*-
"""Project 5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V2RbODQyXkSyBWj8sUwvsIguciuUMBls
"""

#LIBRARIES
import numpy as np
import matplotlib as plt
import scipy
import time

#CLASSES
class Edge_Tridiag():
  def __init__(self, array_d, array_a, array_b, array_e):
    self.n = len(array_d)
    self.d = array_d
    self.a = array_a
    self.b = array_b
    self.e = array_e

#FUNCTIONS
def multiply(array_nn, array_n):
  n = array_nn.n
  result = []
  result.append(array_nn.d[0]*array_n[0] + array_nn.a[0] * array_n[1] + array_nn.e[0]* array_n[n-1])
  for i in range(array_nn.n-3):
    result.append(array_nn.b[i] * array_n[i] + array_nn.d[i+1]*array_n[i+1] + array_nn.a[i+1]*array_n[i+2] + array_nn.e[i+1]* array_n[n-1])
  result.append(array_nn.b[n-3] * array_n[n-3] + array_nn.d[n-2]*array_n[n-2] + array_nn.a[n-2]*array_n[n-1])            
  result.append(array_nn.b[n-2] * array_n[n-2] + array_nn.d[n-1]*array_n[n-1])
  return result

def solve_upper(array_nn, array_n, index):

  n = array_nn.n
  val = array_nn.d[index]

  if (index == n - 1):
    array_nn.d[index] = 1
    array_n[index] = array_n[index]/val
    return 1

  array_n[index] = array_n[index]/val
  array_n[index+1] = -array_nn.b[index]*array_n[index] + array_n[index+1]

  array_nn.d[index] = 1
  array_nn.d[index+1] = array_nn.d[index+1] - (1/val)*(array_nn.a[index]*array_nn.b[index])
  array_nn.a[index] = (1/val) * array_nn.a[index]
  
  if(index + 2 < n):
    array_nn.e[index] = (1/val) * array_nn.e[index]
    if(index + 3 < n):
      array_nn.e[index+1] = array_nn.e[index+1] - array_nn.b[index]*array_nn.e[index]
    else:
      array_nn.a[index+1] = array_nn.a[index+1] - array_nn.b[index]*array_nn.e[index]
  
  return 1

def solve(array_C, array_r):
  n = array_C.n
  sol = np.zeros(n)

  for i in range(n):
    solve_upper(array_C, array_r, i)

  sol[n-1] = array_r[n-1]
  sol[n-2] = array_r[n-2] - array_C.a[n-2]*sol[n-1]
  for i in range(3, n+1):
    sol[n-i] = array_r[n-i] -  array_C.a[n-i]*sol[n-i+1] - array_C.e[n-i]*sol[n-1]
  return sol

#TEST
test_nn = Edge_Tridiag([4,4.1,4.2,4.3,4.4], [1,1.01,1.04,1.09], [.99,.96,.93,.90], [1,.95,.9])
test_n = [1, 2, 3, 4, 5]
result = multiply(test_nn, test_n)
solve(test_nn, result)

#TIME CHECK
SIZE = 40000

start = time.time()
matrix = Edge_Tridiag(list(map((lambda x: 4 + .1*np.sin(x/1000)), range(0, SIZE))),
                      list(map((lambda x: .2*np.sin(x/2000)), range(0, SIZE-1))),
                      list(map((lambda x: .3*np.sin(x/3000)), range(0, SIZE-1))),
                      list(map((lambda x: .4*np.sin(x/4000)), range(0, SIZE-2))))

nums = range(0, SIZE)
result = multiply(matrix, nums)
solve(matrix, result)
end = time.time()
print("time elapsed:", end-start)

